@(imports: Seq[String], classes: Seq[String], targetLocation: String)

package nl.codestar.scalatsi.generator

import _root_.nl.codestar.scalatsi.TSNamedType
import _root_.nl.codestar.scalatsi.TypescriptType.TypescriptNamedType
import _root_.java.io.File

/** User imports */
@for(imp <- imports) {
import @imp
}

object ApplicationTypescriptGeneration {

  // If you get a generator or implicit not found error here, make sure you have defined a TSType[T] implicit and imported it
  val toOutput: Seq[TypescriptNamedType] = Seq(
    @for(userClass <- classes) {
      TSNamedType.getOrGenerate[@userClass].get
    }
  )

  val options = _root_.nl.codestar.scalatsi.output.OutputOptions(
    targetLocation = new File("@targetLocation")
  )

  def main(args: Array[String]): Unit = {
    _root_.nl.codestar.scalatsi.output.WriteTSToFiles.write(options)(toOutput)
  }
}
